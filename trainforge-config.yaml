# TrainForge Platform Configuration
# This file defines all services and their configurations for easy startup

platform:
  name: "TrainForge"
  version: "0.1.0"
  description: "Distributed AI Training Platform"

# Global configuration
global:
  api_url: "http://localhost:3000"
  dashboard_url: "http://localhost:3001"
  mongodb_uri: "mongodb://localhost:27017/trainforge"
  log_level: "info"

# Service definitions
services:
  # MongoDB Database
  mongodb:
    name: "MongoDB"
    description: "Database service"
    required: true
    startup_order: 1
    health_check: "mongosh --eval 'db.runCommand({ping:1})'"
    install_notes: "Install MongoDB Community Edition from https://mongodb.com"

  # API Server
  api:
    name: "TrainForge API"
    description: "Backend REST API server"
    directory: "./trainforge/api"
    startup_order: 2
    port: 3000
    environment:
      PORT: 3000
      MONGODB_URI: "mongodb://localhost:27017/trainforge"
      NODE_ENV: "development"
      FRONTEND_URL: "http://localhost:3001"
    dependencies:
      - mongodb
    health_check: "http://localhost:3000/health"
    commands:
      install: "npm install"
      start: "npm run dev"
      test: "npm test"

  # Dashboard Web Interface
  dashboard:
    name: "TrainForge Dashboard"
    description: "React web interface"
    directory: "./trainforge/dashboard"
    startup_order: 3
    port: 3001
    dependencies:
      - api
    health_check: "http://localhost:3001"
    commands:
      install: "npm install"
      start: "npm start"
      build: "npm run build"
      test: "npm test"

  # CLI Tool
  cli:
    name: "TrainForge CLI"
    description: "Command-line interface"
    directory: "./trainforge/cli"
    startup_order: 4
    dependencies:
      - api
    commands:
      install: "pip install -e ."
      test: "trainforge --help"

  # Scheduler (Optional)
  scheduler:
    name: "TrainForge Scheduler"
    description: "GPU resource management and job scheduling"
    directory: "./trainforge/scheduler"
    startup_order: 5
    optional: true
    dependencies:
      - api
    commands:
      install: "pip install -r src/requirements.txt"
      start: "python src/job_scheduler.py"

  # Worker (Optional)
  worker:
    name: "TrainForge Worker"
    description: "Training job execution worker"
    directory: "./trainforge/worker"
    startup_order: 6
    optional: true
    environment:
      TRAINFORGE_API_URL: "http://localhost:3000"
    dependencies:
      - api
    commands:
      install: "pip install -r requirements.txt"
      start: "python worker.py"

# Development profiles
profiles:
  # Minimal setup - just API and Dashboard
  minimal:
    description: "API + Dashboard only"
    services:
      - mongodb
      - api
      - dashboard
      - cli

  # Full development setup
  full:
    description: "All services for full development"
    services:
      - mongodb
      - api
      - dashboard
      - cli
      - scheduler
      - worker

  # Production setup
  production:
    description: "Production deployment"
    services:
      - mongodb
      - api
      - dashboard
      - scheduler
      - worker
    environment:
      NODE_ENV: "production"
      LOG_LEVEL: "warn"

# Quick start commands
quick_start:
  setup_all: |
    # Install all dependencies
    cd trainforge/api && npm install
    cd ../dashboard && npm install
    cd ../cli && pip install -e .
    cd ../scheduler && pip install -r src/requirements.txt
    cd ../worker && pip install -r requirements.txt
    
  start_minimal: |
    # Start minimal setup (API + Dashboard)
    # 1. Start MongoDB (manual)
    # 2. Start API: cd trainforge/api && npm run dev
    # 3. Start Dashboard: cd trainforge/dashboard && npm start
    
  start_full: |
    # Start full setup
    # 1. Start MongoDB (manual)
    # 2. Start API: cd trainforge/api && npm run dev
    # 3. Start Dashboard: cd trainforge/dashboard && npm start
    # 4. Start Scheduler: cd trainforge/scheduler && python src/job_scheduler.py
    # 5. Start Worker: cd trainforge/worker && python worker.py