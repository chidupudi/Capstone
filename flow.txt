# TrainForge Architecture - Mermaid Diagrams

## 1. Current System Architecture
```mermaid
graph TB
    subgraph "TrainForge Platform"
        CLI[CLI Interface]
        API[API Server<br/>Port 3000]
        DB[(MongoDB<br/>Database)]
        DASH[Dashboard<br/>Port 3001]
        SCHED[Scheduler]
    end

    subgraph "Local Workers"
        LW[Local Worker<br/>CPU/GPU]
    end

    subgraph "External Workers"
        CW[Colab Worker<br/>Tesla T4 GPU]
        NGROK[ngrok Tunnel<br/>Public Access]
    end

    subgraph "Cloud Providers"
        COLAB[Google Colab<br/>Free Tier]
    end

    CLI --> API
    DASH --> API
    API --> DB
    API --> SCHED
    SCHED --> LW
    SCHED --> CW
    CW --> NGROK
    NGROK --> API
    CW --> COLAB

    style API fill:#e1f5fe
    style DB fill:#f3e5f5
    style CW fill:#e8f5e8
    style COLAB fill:#fff3e0
```

## 2. Job Execution Sequence
```mermaid
sequenceDiagram
    participant U as User
    participant D as Dashboard
    participant A as API Server
    participant S as Scheduler
    participant LW as Local Worker
    participant EW as External Worker
    participant DB as MongoDB

    U->>D: Submit Job
    D->>A: POST /api/jobs
    A->>DB: Store Job
    A->>S: Notify New Job

    par Local Worker
        S->>LW: Check Availability
        LW->>S: Status Response
    and External Worker
        S->>EW: Check Availability
        EW->>S: Status Response
    end

    alt GPU Required & External Available
        S->>EW: Assign Job
        EW->>DB: Update Status
        EW->>EW: Execute Training
        EW->>DB: Log Progress
        EW->>A: Complete Job
    else Local Worker Available
        S->>LW: Assign Job
        LW->>DB: Update Status
        LW->>LW: Execute Training
        LW->>DB: Log Progress
        LW->>A: Complete Job
    end

    A->>D: Update UI
    D->>U: Show Results
```

## 3. Future Kubernetes Infrastructure
```mermaid
graph TB
    subgraph "Control Plane"
        INGRESS[Ingress Controller]
        API_K8S[TrainForge API<br/>Kubernetes Service]
        SCHED_K8S[Scheduler<br/>Kubernetes Deployment]
        DB_K8S[(MongoDB<br/>StatefulSet)]
    end

    subgraph "Worker Nodes"
        subgraph "Node 1"
            W1[Worker Pod 1<br/>CPU Only]
        end
        subgraph "Node 2"
            W2[Worker Pod 2<br/>GPU Enabled]
        end
        subgraph "Node 3"
            W3[Worker Pod 3<br/>High Memory]
        end
    end

    subgraph "External Cloud Workers"
        subgraph "Google Cloud"
            GCP_W[GCP Worker<br/>V100/T4 GPU]
            GCP_K8S[GKE Cluster]
        end
        subgraph "AWS"
            AWS_W[AWS Worker<br/>A100/V100 GPU]
            AWS_EKS[EKS Cluster]
        end
        subgraph "Free Tier Services"
            COLAB_W[Colab Worker<br/>Tesla T4]
            KAGGLE_W[Kaggle Worker<br/>GPU Enabled]
        end
    end

    subgraph "Storage"
        PV[Persistent Volumes]
        S3[Cloud Storage<br/>AWS S3/GCS]
    end

    INGRESS --> API_K8S
    API_K8S --> SCHED_K8S
    API_K8S --> DB_K8S
    SCHED_K8S --> W1
    SCHED_K8S --> W2
    SCHED_K8S --> W3
    SCHED_K8S --> GCP_W
    SCHED_K8S --> AWS_W
    SCHED_K8S --> COLAB_W
    SCHED_K8S --> KAGGLE_W

    W1 --> PV
    W2 --> PV
    W3 --> PV
    GCP_W --> S3
    AWS_W --> S3

    style API_K8S fill:#e1f5fe
    style SCHED_K8S fill:#f3e5f5
    style DB_K8S fill:#fff3e0
    style GCP_W fill:#4caf50
    style AWS_W fill:#ff9800
    style COLAB_W fill:#2196f3
    style KAGGLE_W fill:#9c27b0
```

## 4. Current vs Future Comparison
```mermaid
graph LR
    subgraph "Current Architecture"
        C_API[API Server]
        C_DB[(MongoDB)]
        C_LOCAL[Local Worker]
        C_COLAB[Colab Worker]

        C_API --> C_DB
        C_API --> C_LOCAL
        C_API --> C_COLAB
    end

    subgraph "Future K8s Architecture"
        F_INGRESS[Ingress]
        F_API[API Pods]
        F_DB[(MongoDB StatefulSet)]
        F_WORKERS[Worker Pods]
        F_CLOUD[Multi-Cloud Workers]
        F_STORAGE[Persistent Storage]

        F_INGRESS --> F_API
        F_API --> F_DB
        F_API --> F_WORKERS
        F_API --> F_CLOUD
        F_WORKERS --> F_STORAGE
    end

    C_API -.->|Migration| F_API
    C_DB -.->|Migration| F_DB
    C_LOCAL -.->|Containerize| F_WORKERS
    C_COLAB -.->|Expand| F_CLOUD

    style C_API fill:#ffcdd2
    style F_API fill:#c8e6c9
```

## 5. Cloud Provider Integration Strategy
```mermaid
graph TB
    subgraph "TrainForge Core"
        CORE_API[Core API]
        CORE_SCHED[Scheduler]
    end

    subgraph "Free Tier Providers"
        COLAB[Google Colab<br/>Tesla T4<br/>12GB RAM]
        KAGGLE[Kaggle Kernels<br/>GPU P100<br/>16GB RAM]
        GITHUB[GitHub Codespaces<br/>CPU Only<br/>4GB RAM]
    end

    subgraph "Cloud Providers"
        subgraph "Google Cloud"
            GCP_COMPUTE[Compute Engine]
            GCP_AI[AI Platform]
            GCP_K8S[GKE]
        end
        subgraph "AWS"
            AWS_EC2[EC2 Instances]
            AWS_SAGE[SageMaker]
            AWS_EKS[EKS]
        end
        subgraph "Azure"
            AZURE_VM[Virtual Machines]
            AZURE_ML[ML Studio]
            AZURE_AKS[AKS]
        end
    end

    subgraph "On-Premise"
        LOCAL_GPU[Local GPU Servers]
        LOCAL_CLUSTER[Local K8s Cluster]
    end

    CORE_API --> COLAB
    CORE_API --> KAGGLE
    CORE_API --> GITHUB
    CORE_API --> GCP_COMPUTE
    CORE_API --> AWS_EC2
    CORE_API --> AZURE_VM
    CORE_API --> LOCAL_GPU

    CORE_SCHED --> GCP_K8S
    CORE_SCHED --> AWS_EKS
    CORE_SCHED --> AZURE_AKS
    CORE_SCHED --> LOCAL_CLUSTER

    style COLAB fill:#4285f4
    style KAGGLE fill:#20beff
    style GCP_COMPUTE fill:#4285f4
    style AWS_EC2 fill:#ff9900
    style AZURE_VM fill:#0078d4
    style LOCAL_GPU fill:#795548
```

## 6. Worker Registration and Management Flow
```mermaid
stateDiagram-v2
    [*] --> Unregistered
    Unregistered --> Registering: Worker Starts
    Registering --> Active: Registration Success
    Registering --> Failed: Registration Failed
    Failed --> Registering: Retry

    Active --> Idle: No Jobs
    Active --> Busy: Job Assigned
    Busy --> Active: Job Complete
    Busy --> Failed: Job Failed

    Active --> Heartbeat: Send Status
    Heartbeat --> Active: Status OK
    Heartbeat --> Disconnected: Timeout

    Idle --> Disconnected: Connection Lost
    Disconnected --> Registering: Reconnect

    Failed --> [*]: Shutdown
    Active --> [*]: Graceful Shutdown
```